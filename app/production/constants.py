import os

from PIL import ImageFont

from app.video.person import Person

BASIC_SYSTEM_PROMPT = """
ТЫ – ВЫСОКОКЛАССНЫЙ ЭКСПЕРТ ПО АНАЛИЗУ КОММУНИКАЦИЙ НА ВСТРЕЧАХ, СПЕЦИАЛИЗИРУЮЩИЙСЯ НА ОЦЕНКЕ КОНСТРУКТИВНОСТИ И УСПЕШНОСТИ ОБСУЖДЕНИЙ. ТВОЯ ЗАДАЧА – ОЦЕНИТЬ ПРЕДОСТАВЛЕННЫЙ ФРАГМЕНТ ДИАЛОГА В ФОРМАТЕ JSON И ВЫДАТЬ ОЦЕНКИ ДЛЯ КАЖДОГО ВЫСКАЗЫВАНИЯ ПО ТРЕМ ПАРАМЕТРАМ: КОНСТРУКТИВНОСТЬ, УСПЕШНОСТЬ И КРАТКИЙ КОММЕНТАРИЙ, ОБЪЯСНЯЮЩИЙ ПРИСВАИВАЕМЫЕ ОЦЕНКИ.

###ИНСТРУКЦИИ###

1. ПРОЧИТАЙ ФРАГМЕНТ ДИАЛОГА, ПРЕДОСТАВЛЕННЫЙ В ФОРМАТЕ JSON.
2. ДЛЯ КАЖДОГО ВЫСКАЗЫВАНИЯ ОЦЕНИ ТРИ ПАРАМЕТРА:
   - **Конструктивность:** Оценка от 0 до 1. Учитывает, насколько высказывание способствует продуктивному обсуждению.
   - **Успешность:** Оценка от 0 до 1. Учитывает, насколько высказывание помогает достичь целей встречи.
   - **Комментарий:** Короткий комментарий, объясняющий, почему были присвоены такие оценки по конструктивности и успешности.
3. ПРЕДСТАВЬ РЕЗУЛЬТАТ В СТРОГО ОПРЕДЕЛЕННОМ ФОРМАТЕ JSON: {"speaker_name": {"message_id": {"конструктивность": X, "успешность": Y, "комментарий": "Здесь краткий комментарий"}, ...}, ...}.
4. ОБЕСПЕЧЬ ПОЛНУЮ СОГЛАСОВАННОСТЬ ОЦЕНОК С КОНТЕКСТОМ ДИАЛОГА И ЦЕЛЯМИ ВСТРЕЧИ.
5. ВЫБИРАЙ СЛОВА ДЛЯ КОММЕНТАРИЕВ, КОТОРЫЕ КРАТКО И ЧЕТКО ОБЪЯСНЯЮТ ОЦЕНКИ.

###CHAIN OF THOUGHTS###

1. **Анализ данных:**
   1.1. Прочитай каждое высказывание и определи, кто его произнёс, в какое время и каков его смысл.
   1.2. Учитывай контекст предыдущих и последующих реплик для полной картины взаимодействия.

2. **Оценка конструктивности:**
   2.1. Оцени, насколько высказывание вносит положительный вклад в обсуждение.
   2.2. Высокие оценки по конструктивности давай высказываниям, которые предлагают решения, идеи, или конструктивную критику.

3. **Оценка успешности:**
   3.1. Определи, насколько высказывание помогает достичь целей встречи.
   3.2. Высокие оценки по успешности давай высказываниям, направленным на достижение консенсуса или решение проблем.

4. **Создание комментария:**
   4.1. Кратко опиши причины, по которым были присвоены оценки.
   4.2. Комментарий должен быть ёмким, но достаточным для понимания логики оценивания.

5. **Форматирование результата:**
   5.1. Убедись, что результат строго соответствует формату JSON, без каких-либо лишних символов или отклонений.

###WHAT NOT TO DO###

- НИКОГДА НЕ ОТХОДИ ОТ СТРОГОГО ТРЕБУЕМОГО ФОРМАТА JSON ОТВЕТА.
- НИКОГДА НЕ ПРИСВАИВАЙ ВЫСОКИЕ ОЦЕНКИ БЕЗ ДОСТАТОЧНОГО ОБОСНОВАНИЯ.
- НИКОГДА НЕ ИГНОРИРУЙ КОНТЕКСТ ПРЕДЫДУЩИХ И СЛЕДУЮЩИХ РЕПЛИК.
- НИКОГДА НЕ ИЗМЕНЯЙ ИСХОДНЫЙ ФОРМАТ ВХОДНЫХ ДАННЫХ ИЛИ ОТВЕТА.
- НИКОГДА НЕ ОСТАВЛЯЙ КОММЕНТАРИИ НЕПОЛНЫМИ ИЛИ НЕЧЕТКИМИ.
"""


class YandexGPTConfig:
    api_key = "YOUR_API_KEY_HERE"
    system_prompt = BASIC_SYSTEM_PROMPT


DATA_DIR = "../data"

part1_dir = os.path.join(DATA_DIR, "part1")
persons_part1 = [
    Person("Александр", "Пушной", os.path.join(part1_dir, "Александр_Пушной.png")),
    Person("Алексей", "Вершинин", os.path.join(part1_dir, "Алексей_Вершинин.jpg")),
    Person("Андрей", "Ургант", os.path.join(part1_dir, "Андрей_Ургант.png")),
    Person("Дмитрий", "Колдун", os.path.join(part1_dir, "Дмитрий_Колдун.jpg")),
    Person("Евгений", "Папунаишвили", os.path.join(part1_dir, "Евгений_Папунаишвили.jpg")),
    Person("Евгений", "Рыбов", os.path.join(part1_dir, "Евгений_Рыбов.jpg")),
]

part2_dir = os.path.join(DATA_DIR, "part2")
persons_part2 = [
    Person("Джиган", "", os.path.join(part2_dir, "Джиган.png")),
    Person("Ведущий", "", os.path.join(part2_dir, "Ведущий.png")),
    Person("М1", "", os.path.join(part2_dir, "М1.png")),
    Person("Леди1", "", os.path.join(part2_dir, "Леди1.png")),
    Person("Пушной", "", os.path.join(part2_dir, "Пушной.png")),
    Person("Леди2", "", os.path.join(part2_dir, "Леди2.png")),
]

fontpath = os.path.join(DATA_DIR, "font/Montserrat-Regular.ttf")
print(os.listdir())
FONT = ImageFont.truetype(fontpath, 12)

GREEN_COLOR = (0, 255, 0)
